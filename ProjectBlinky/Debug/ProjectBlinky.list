
ProjectBlinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f1c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003028  08003028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800304c  0800304c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  0800304c  0800304c  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800304c  0800304c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800304c  0800304c  0000404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08003058  08003058  00004058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003064  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001208  2000005c  080030c0  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001264  080030c0  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112b3  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bff  00000000  00000000  00016338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00018f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb8  00000000  00000000  0001a008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acaa  00000000  00000000  0001acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f33c  00000000  00000000  0003596a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009544c  00000000  00000000  00044ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da0f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de0  00000000  00000000  000da138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000def18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003010 	.word	0x08003010

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003010 	.word	0x08003010

0800014c <_Z8writePWMiiii>:
#define SPEED 50




void writePWM(int forLef,int bacLef,int forRig,int bacRig){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	htim1.Instance-> CCR1 = ((forLef)*65535)/100;//Forward Left
 800015a:	68fa      	ldr	r2, [r7, #12]
 800015c:	4613      	mov	r3, r2
 800015e:	041b      	lsls	r3, r3, #16
 8000160:	1a9b      	subs	r3, r3, r2
 8000162:	4a1a      	ldr	r2, [pc, #104]	@ (80001cc <_Z8writePWMiiii+0x80>)
 8000164:	fb82 1203 	smull	r1, r2, r2, r3
 8000168:	1152      	asrs	r2, r2, #5
 800016a:	17db      	asrs	r3, r3, #31
 800016c:	1ad2      	subs	r2, r2, r3
 800016e:	4b18      	ldr	r3, [pc, #96]	@ (80001d0 <_Z8writePWMiiii+0x84>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance-> CCR2 = ((bacLef)*65535)/100;//Backward Left
 8000174:	68ba      	ldr	r2, [r7, #8]
 8000176:	4613      	mov	r3, r2
 8000178:	041b      	lsls	r3, r3, #16
 800017a:	1a9b      	subs	r3, r3, r2
 800017c:	4a13      	ldr	r2, [pc, #76]	@ (80001cc <_Z8writePWMiiii+0x80>)
 800017e:	fb82 1203 	smull	r1, r2, r2, r3
 8000182:	1152      	asrs	r2, r2, #5
 8000184:	17db      	asrs	r3, r3, #31
 8000186:	1ad2      	subs	r2, r2, r3
 8000188:	4b11      	ldr	r3, [pc, #68]	@ (80001d0 <_Z8writePWMiiii+0x84>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.Instance-> CCR3 = ((forRig)*65535)/100;//Forward Right
 800018e:	687a      	ldr	r2, [r7, #4]
 8000190:	4613      	mov	r3, r2
 8000192:	041b      	lsls	r3, r3, #16
 8000194:	1a9b      	subs	r3, r3, r2
 8000196:	4a0d      	ldr	r2, [pc, #52]	@ (80001cc <_Z8writePWMiiii+0x80>)
 8000198:	fb82 1203 	smull	r1, r2, r2, r3
 800019c:	1152      	asrs	r2, r2, #5
 800019e:	17db      	asrs	r3, r3, #31
 80001a0:	1ad2      	subs	r2, r2, r3
 80001a2:	4b0b      	ldr	r3, [pc, #44]	@ (80001d0 <_Z8writePWMiiii+0x84>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim1.Instance-> CCR4 = ((bacRig)*65535)/100;//Backward Right
 80001a8:	683a      	ldr	r2, [r7, #0]
 80001aa:	4613      	mov	r3, r2
 80001ac:	041b      	lsls	r3, r3, #16
 80001ae:	1a9b      	subs	r3, r3, r2
 80001b0:	4a06      	ldr	r2, [pc, #24]	@ (80001cc <_Z8writePWMiiii+0x80>)
 80001b2:	fb82 1203 	smull	r1, r2, r2, r3
 80001b6:	1152      	asrs	r2, r2, #5
 80001b8:	17db      	asrs	r3, r3, #31
 80001ba:	1ad2      	subs	r2, r2, r3
 80001bc:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <_Z8writePWMiiii+0x84>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80001c2:	bf00      	nop
 80001c4:	3714      	adds	r7, #20
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	51eb851f 	.word	0x51eb851f
 80001d0:	200010cc 	.word	0x200010cc

080001d4 <_Z11moveForwardi>:




void moveForward(int numCells){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	writePWM(SPEED,0,SPEED,0);
 80001dc:	2300      	movs	r3, #0
 80001de:	2232      	movs	r2, #50	@ 0x32
 80001e0:	2100      	movs	r1, #0
 80001e2:	2032      	movs	r0, #50	@ 0x32
 80001e4:	f7ff ffb2 	bl	800014c <_Z8writePWMiiii>
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <_Z8turnLeftv>:
bool wallRight(){
	return HAL_GPIO_ReadPin(SensorR_GPIO_Port, SensorR_Pin);
}


void turnLeft(){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	writePWM(SPEED,0,0,SPEED);
 80001f4:	2332      	movs	r3, #50	@ 0x32
 80001f6:	2200      	movs	r2, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	2032      	movs	r0, #50	@ 0x32
 80001fc:	f7ff ffa6 	bl	800014c <_Z8writePWMiiii>
}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}

08000204 <_Z9turnRightv>:

void turnRight(){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	writePWM(0,SPEED,SPEED,0);
 8000208:	2300      	movs	r3, #0
 800020a:	2232      	movs	r2, #50	@ 0x32
 800020c:	2132      	movs	r1, #50	@ 0x32
 800020e:	2000      	movs	r0, #0
 8000210:	f7ff ff9c 	bl	800014c <_Z8writePWMiiii>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}

08000218 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000226:	d205      	bcs.n	8000234 <_ZSt16__deque_buf_sizej+0x1c>
 8000228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000232:	e000      	b.n	8000236 <_ZSt16__deque_buf_sizej+0x1e>
 8000234:	2301      	movs	r3, #1
 8000236:	4618      	mov	r0, r3
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr

08000240 <_ZN8mazeCellC1Ev>:
std::queue<std::array<int, 3>> floodfillQueue;

/*
    Stores information about the cell in the current maze
*/
struct mazeCell
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	731a      	strb	r2, [r3, #12]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2200      	movs	r2, #0
 800025e:	735a      	strb	r2, [r3, #13]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4618      	mov	r0, r3
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f825 	bl	80002c6 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EEC1Ev>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4618      	mov	r0, r3
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}

08000286 <_ZNSt5queueISt5arrayIiLj3EESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	6078      	str	r0, [r7, #4]
	: c() { }
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4618      	mov	r0, r3
 8000292:	2328      	movs	r3, #40	@ 0x28
 8000294:	461a      	mov	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f002 fdea 	bl	8002e70 <memset>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ffe4 	bl	800026c <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EEC1Ev>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4618      	mov	r0, r3
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b082      	sub	sp, #8
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f000 f86d 	bl	8000396 <_ZNSaISt5arrayIiLj3EEED1Ev>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EEC1Ev>:
      _Deque_base()
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b082      	sub	sp, #8
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f850 	bl	8000376 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80002d6:	2100      	movs	r1, #0
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f000 f868 	bl	80003ae <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE17_M_initialize_mapEj>
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4618      	mov	r0, r3
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d010      	beq.n	800031a <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000300:	3304      	adds	r3, #4
 8000302:	461a      	mov	r2, r3
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f8b8 	bl	800047a <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6819      	ldr	r1, [r3, #0]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	461a      	mov	r2, r3
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f000 f8cb 	bl	80004b0 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffc6 	bl	80002ae <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE11_Deque_implD1Ev>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4618      	mov	r0, r3
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	@ 0x28
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	6879      	ldr	r1, [r7, #4]
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f8d3 	bl	80004e6 <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EE5beginEv>
 8000340:	f107 0318 	add.w	r3, r7, #24
 8000344:	6879      	ldr	r1, [r7, #4]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f8dc 	bl	8000504 <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EE3endEv>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4618      	mov	r0, r3
 8000350:	f000 f8e7 	bl	8000522 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE19_M_get_Tp_allocatorEv>
 8000354:	4603      	mov	r3, r0
 8000356:	f107 0218 	add.w	r2, r7, #24
 800035a:	f107 0108 	add.w	r1, r7, #8
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f000 f904 	bl	800056c <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffbe 	bl	80002e8 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EED1Ev>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4618      	mov	r0, r3
 8000370:	3728      	adds	r7, #40	@ 0x28
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8000376:	b580      	push	{r7, lr}
 8000378:	b082      	sub	sp, #8
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f000 f900 	bl	8000584 <_ZNSaISt5arrayIiLj3EEEC1Ev>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f908 	bl	800059c <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_ZNSaISt5arrayIiLj3EEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000396:	b580      	push	{r7, lr}
 8000398:	b082      	sub	sp, #8
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f000 f915 	bl	80005ce <_ZNSt15__new_allocatorISt5arrayIiLj3EEED1Ev>
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80003ae:	b590      	push	{r4, r7, lr}
 80003b0:	b089      	sub	sp, #36	@ 0x24
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80003b8:	200c      	movs	r0, #12
 80003ba:	f7ff ff2d 	bl	8000218 <_ZSt16__deque_buf_sizej>
 80003be:	4602      	mov	r2, r0
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80003c6:	3301      	adds	r3, #1
 80003c8:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80003ca:	2308      	movs	r3, #8
 80003cc:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	3302      	adds	r3, #2
 80003d2:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80003d4:	f107 0210 	add.w	r2, r7, #16
 80003d8:	f107 030c 	add.w	r3, r7, #12
 80003dc:	4611      	mov	r1, r2
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f8ff 	bl	80005e2 <_ZSt3maxIjERKT_S2_S2_>
 80003e4:	4603      	mov	r3, r0
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	4619      	mov	r1, r3
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f000 f908 	bl	8000608 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE15_M_allocate_mapEj>
 80003f8:	4602      	mov	r2, r0
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6859      	ldr	r1, [r3, #4]
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	085b      	lsrs	r3, r3, #1
 800040c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800040e:	4413      	add	r3, r2
 8000410:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	69ba      	ldr	r2, [r7, #24]
 8000418:	4413      	add	r3, r2
 800041a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	69b9      	ldr	r1, [r7, #24]
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f000 f90e 	bl	8000642 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	3308      	adds	r3, #8
 800042a:	69b9      	ldr	r1, [r7, #24]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f923 	bl	8000678 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f103 0218 	add.w	r2, r3, #24
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	3b04      	subs	r3, #4
 800043c:	4619      	mov	r1, r3
 800043e:	4610      	mov	r0, r2
 8000440:	f000 f91a 	bl	8000678 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	68da      	ldr	r2, [r3, #12]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000450:	200c      	movs	r0, #12
 8000452:	f7ff fee1 	bl	8000218 <_ZSt16__deque_buf_sizej>
 8000456:	4602      	mov	r2, r0
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	fbb3 f1f2 	udiv	r1, r3, r2
 800045e:	fb01 f202 	mul.w	r2, r1, r2
 8000462:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8000464:	4613      	mov	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	4413      	add	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	619a      	str	r2, [r3, #24]
    }
 8000472:	bf00      	nop
 8000474:	3724      	adds	r7, #36	@ 0x24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd90      	pop	{r4, r7, pc}

0800047a <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 800047a:	b580      	push	{r7, lr}
 800047c:	b086      	sub	sp, #24
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e008      	b.n	800049e <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x24>
	_M_deallocate_node(*__n);
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4619      	mov	r1, r3
 8000492:	68f8      	ldr	r0, [r7, #12]
 8000494:	f000 f90c 	bl	80006b0 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	3304      	adds	r3, #4
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	697a      	ldr	r2, [r7, #20]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d3f2      	bcc.n	800048c <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x12>
    }
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	68f9      	ldr	r1, [r7, #12]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f907 	bl	80006d6 <_ZNKSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	68b9      	ldr	r1, [r7, #8]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 f91d 	bl	8000710 <_ZNSt16allocator_traitsISaIPSt5arrayIiLj3EEEE10deallocateERS3_PS2_j>
      }
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f90c 	bl	80006f8 <_ZNSaIPSt5arrayIiLj3EEED1Ev>
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      _GLIBCXX_NODISCARD
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	3308      	adds	r3, #8
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 f81d 	bl	8000536 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_EC1ERKS4_>
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EE3endEv>:
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD
      iterator
      end() _GLIBCXX_NOEXCEPT
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	3318      	adds	r3, #24
 8000512:	4619      	mov	r1, r3
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 f80e 	bl	8000536 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_EC1ERKS4_>
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4618      	mov	r0, r3
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
 800053e:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685a      	ldr	r2, [r3, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800056c:	b480      	push	{r7}
 800056e:	b08d      	sub	sp, #52	@ 0x34
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800057a:	bf00      	nop
 800057c:	3734      	adds	r7, #52	@ 0x34
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <_ZNSaISt5arrayIiLj3EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f8ce 	bl	800072e <_ZNSt15__new_allocatorISt5arrayIiLj3EEEC1Ev>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3308      	adds	r3, #8
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f8c4 	bl	8000742 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_EC1Ev>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3318      	adds	r3, #24
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f8bf 	bl	8000742 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_EC1Ev>
	{ }
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <_ZNSt15__new_allocatorISt5arrayIiLj3EEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d201      	bcs.n	80005fc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	e000      	b.n	80005fe <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80005fc:	687b      	ldr	r3, [r7, #4]
    }
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f85c 	bl	80006d6 <_ZNKSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	6839      	ldr	r1, [r7, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f8a2 	bl	800076e <_ZNSt16allocator_traitsISaIPSt5arrayIiLj3EEEE8allocateERS3_j>
 800062a:	4604      	mov	r4, r0
 800062c:	bf00      	nop
      }
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f860 	bl	80006f8 <_ZNSaIPSt5arrayIiLj3EEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000638:	4623      	mov	r3, r4
      }
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bd90      	pop	{r4, r7, pc}

08000642 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	e008      	b.n	8000666 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x24>
	    *__cur = this->_M_allocate_node();
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f000 f899 	bl	800078c <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE16_M_allocate_nodeEv>
 800065a:	4602      	mov	r2, r0
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	3304      	adds	r3, #4
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	d3f2      	bcc.n	8000654 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x12>
    }
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	685c      	ldr	r4, [r3, #4]
 8000694:	f000 f88c 	bl	80007b0 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_E14_S_buffer_sizeEv>
 8000698:	4602      	mov	r2, r0
 800069a:	4613      	mov	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	4413      	add	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	18e2      	adds	r2, r4, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	609a      	str	r2, [r3, #8]
      }
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80006ba:	687c      	ldr	r4, [r7, #4]
 80006bc:	200c      	movs	r0, #12
 80006be:	f7ff fdab 	bl	8000218 <_ZSt16__deque_buf_sizej>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	6839      	ldr	r1, [r7, #0]
 80006c8:	4620      	mov	r0, r4
 80006ca:	f000 f879 	bl	80007c0 <_ZNSt16allocator_traitsISaISt5arrayIiLj3EEEE10deallocateERS2_PS1_j>
      }
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd90      	pop	{r4, r7, pc}

080006d6 <_ZNKSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f000 f87c 	bl	80007de <_ZNKSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE19_M_get_Tp_allocatorEv>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4619      	mov	r1, r3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f881 	bl	80007f2 <_ZNSaIPSt5arrayIiLj3EEEC1IS0_EERKSaIT_E>
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_ZNSaIPSt5arrayIiLj3EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f883 	bl	800080c <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEED1Ev>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZNSt16allocator_traitsISaIPSt5arrayIiLj3EEEE10deallocateERS3_PS2_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	68b9      	ldr	r1, [r7, #8]
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f000 f87d 	bl	8000820 <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEE10deallocateEPS2_j>
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_ZNSt15__new_allocatorISt5arrayIiLj3EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <_ZNSt16allocator_traitsISaIPSt5arrayIiLj3EEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000778:	2200      	movs	r2, #0
 800077a:	6839      	ldr	r1, [r7, #0]
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 f85f 	bl	8000840 <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEE8allocateEjPKv>
 8000782:	4603      	mov	r3, r0
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <_ZNSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8000794:	687c      	ldr	r4, [r7, #4]
 8000796:	200c      	movs	r0, #12
 8000798:	f7ff fd3e 	bl	8000218 <_ZSt16__deque_buf_sizej>
 800079c:	4603      	mov	r3, r0
 800079e:	4619      	mov	r1, r3
 80007a0:	4620      	mov	r0, r4
 80007a2:	f000 f876 	bl	8000892 <_ZNSt16allocator_traitsISaISt5arrayIiLj3EEEE8allocateERS2_j>
 80007a6:	4603      	mov	r3, r0
      }
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd90      	pop	{r4, r7, pc}

080007b0 <_ZNSt15_Deque_iteratorISt5arrayIiLj3EERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80007b4:	200c      	movs	r0, #12
 80007b6:	f7ff fd2f 	bl	8000218 <_ZSt16__deque_buf_sizej>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4618      	mov	r0, r3
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_ZNSt16allocator_traitsISaISt5arrayIiLj3EEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	68b9      	ldr	r1, [r7, #8]
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f000 f86d 	bl	80008b0 <_ZNSt15__new_allocatorISt5arrayIiLj3EEE10deallocateEPS1_j>
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <_ZNKSt11_Deque_baseISt5arrayIiLj3EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <_ZNSaIPSt5arrayIiLj3EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	6039      	str	r1, [r7, #0]
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f000 f86a 	bl	80008d6 <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEEC1Ev>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4619      	mov	r1, r3
 8000832:	68b8      	ldr	r0, [r7, #8]
 8000834:	f002 fa31 	bl	8002c9a <_ZdlPvj>
      }
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f000 f84c 	bl	80008ea <_ZNKSt15__new_allocatorIPSt5arrayIiLj3EEE11_M_max_sizeEv>
 8000852:	4602      	mov	r2, r0
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4293      	cmp	r3, r2
 8000858:	bf8c      	ite	hi
 800085a:	2301      	movhi	r3, #1
 800085c:	2300      	movls	r3, #0
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf14      	ite	ne
 8000864:	2301      	movne	r3, #1
 8000866:	2300      	moveq	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d007      	beq.n	800087e <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000874:	d301      	bcc.n	800087a <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8000876:	f002 fa28 	bl	8002cca <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800087a:	f002 fa23 	bl	8002cc4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fa0b 	bl	8002c9e <_Znwj>
 8000888:	4603      	mov	r3, r0
      }
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_ZNSt16allocator_traitsISaISt5arrayIiLj3EEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800089c:	2200      	movs	r2, #0
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f82d 	bl	8000900 <_ZNSt15__new_allocatorISt5arrayIiLj3EEE8allocateEjPKv>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_ZNSt15__new_allocatorISt5arrayIiLj3EEE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4619      	mov	r1, r3
 80008c8:	68b8      	ldr	r0, [r7, #8]
 80008ca:	f002 f9e6 	bl	8002c9a <_ZdlPvj>
      }
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_ZNSt15__new_allocatorIPSt5arrayIiLj3EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <_ZNKSt15__new_allocatorIPSt5arrayIiLj3EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80008f2:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <_ZNSt15__new_allocatorISt5arrayIiLj3EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f000 f825 	bl	800095c <_ZNKSt15__new_allocatorISt5arrayIiLj3EEE11_M_max_sizeEv>
 8000912:	4602      	mov	r2, r0
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4293      	cmp	r3, r2
 8000918:	bf8c      	ite	hi
 800091a:	2301      	movhi	r3, #1
 800091c:	2300      	movls	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	bf14      	ite	ne
 8000924:	2301      	movne	r3, #1
 8000926:	2300      	moveq	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d007      	beq.n	800093e <_ZNSt15__new_allocatorISt5arrayIiLj3EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	4a09      	ldr	r2, [pc, #36]	@ (8000958 <_ZNSt15__new_allocatorISt5arrayIiLj3EEE8allocateEjPKv+0x58>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d901      	bls.n	800093a <_ZNSt15__new_allocatorISt5arrayIiLj3EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8000936:	f002 f9c8 	bl	8002cca <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800093a:	f002 f9c3 	bl	8002cc4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4618      	mov	r0, r3
 800094a:	f002 f9a8 	bl	8002c9e <_Znwj>
 800094e:	4603      	mov	r3, r0
      }
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	15555555 	.word	0x15555555

0800095c <_ZNKSt15__new_allocatorISt5arrayIiLj3EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000964:	4b02      	ldr	r3, [pc, #8]	@ (8000970 <_ZNKSt15__new_allocatorISt5arrayIiLj3EEE11_M_max_sizeEv+0x14>)
      }
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	0aaaaaaa 	.word	0x0aaaaaaa

08000974 <_ZNSt5queueISt5arrayIiLj3EESt5dequeIS1_SaIS1_EEED1Ev>:
    class queue
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fcd4 	bl	800032c <_ZNSt5dequeISt5arrayIiLj3EESaIS1_EED1Ev>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <_Z41__static_initialization_and_destruction_0ii>:
    for (int i = 0; i < 16; ++i) {
        for (int j = 0; j < 16; ++j) {
            maze[i][j].isGoal = false;
        }
    }
}
 8000990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d11a      	bne.n	80009d8 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d115      	bne.n	80009d8 <_Z41__static_initialization_and_destruction_0ii+0x48>
std::queue<std::array<int, 3>> floodfillQueue;
 80009ac:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80009ae:	f7ff fc6a 	bl	8000286 <_ZNSt5queueISt5arrayIiLj3EESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
mazeCell maze[16][16];
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80009b4:	240f      	movs	r4, #15
 80009b6:	4698      	mov	r8, r3
 80009b8:	e00c      	b.n	80009d4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80009ba:	4646      	mov	r6, r8
 80009bc:	250f      	movs	r5, #15
 80009be:	e004      	b.n	80009ca <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80009c0:	4630      	mov	r0, r6
 80009c2:	f7ff fc3d 	bl	8000240 <_ZN8mazeCellC1Ev>
 80009c6:	3d01      	subs	r5, #1
 80009c8:	3610      	adds	r6, #16
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	daf8      	bge.n	80009c0 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80009ce:	3c01      	subs	r4, #1
 80009d0:	f508 7880 	add.w	r8, r8, #256	@ 0x100
 80009d4:	2c00      	cmp	r4, #0
 80009d6:	daf0      	bge.n	80009ba <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d107      	bne.n	80009ee <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d102      	bne.n	80009ee <_Z41__static_initialization_and_destruction_0ii+0x5e>
std::queue<std::array<int, 3>> floodfillQueue;
 80009e8:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80009ea:	f7ff ffc3 	bl	8000974 <_ZNSt5queueISt5arrayIiLj3EESt5dequeIS1_SaIS1_EEED1Ev>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009f8:	20000078 	.word	0x20000078
 80009fc:	200000a0 	.word	0x200000a0

08000a00 <_GLOBAL__sub_I_floodfillQueue>:
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff ffc1 	bl	8000990 <_Z41__static_initialization_and_destruction_0ii>
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_GLOBAL__sub_D_floodfillQueue>:
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff ffb9 	bl	8000990 <_Z41__static_initialization_and_destruction_0ii>
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <MX_GPIO_Init+0x4c>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <MX_GPIO_Init+0x4c>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <MX_GPIO_Init+0x4c>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SensorL_Pin|SensorR_Pin|SensorF_Pin;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a54:	2302      	movs	r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <MX_GPIO_Init+0x50>)
 8000a60:	f000 ff3c 	bl	80018dc <HAL_GPIO_Init>

}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010800 	.word	0x40010800

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 fdc5 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f82d 	bl	8000adc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a82:	f7ff ffcd 	bl	8000a20 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a86:	f000 fc9f 	bl	80013c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <main+0x64>)
 8000a8e:	f001 fcd7 	bl	8002440 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000a92:	2104      	movs	r1, #4
 8000a94:	4810      	ldr	r0, [pc, #64]	@ (8000ad8 <main+0x64>)
 8000a96:	f001 fcd3 	bl	8002440 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <main+0x64>)
 8000a9e:	f001 fccf 	bl	8002440 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000aa2:	210c      	movs	r1, #12
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <main+0x64>)
 8000aa6:	f001 fccb 	bl	8002440 <HAL_TIM_PWM_Start>

  bool speedModeReady = false;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]

  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  moveForward(50);
 8000aae:	2032      	movs	r0, #50	@ 0x32
 8000ab0:	f7ff fb90 	bl	80001d4 <_Z11moveForwardi>
	  HAL_Delay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ab8:	f000 fe08 	bl	80016cc <HAL_Delay>
	  turnLeft();
 8000abc:	f7ff fb98 	bl	80001f0 <_Z8turnLeftv>
	  HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ac4:	f000 fe02 	bl	80016cc <HAL_Delay>
	  turnRight();
 8000ac8:	f7ff fb9c 	bl	8000204 <_Z9turnRightv>
	  HAL_Delay(500);
 8000acc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ad0:	f000 fdfc 	bl	80016cc <HAL_Delay>
	  moveForward(50);
 8000ad4:	bf00      	nop
 8000ad6:	e7ea      	b.n	8000aae <main+0x3a>
 8000ad8:	200010cc 	.word	0x200010cc

08000adc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b090      	sub	sp, #64	@ 0x40
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0318 	add.w	r3, r7, #24
 8000ae6:	2228      	movs	r2, #40	@ 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 f9c0 	bl	8002e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b02:	2301      	movs	r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b06:	2310      	movs	r3, #16
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b12:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 f861 	bl	8001be4 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8000b32:	f000 f81e 	bl	8000b72 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fac9 	bl	80020e8 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bf14      	ite	ne
 8000b5c:	2301      	movne	r3, #1
 8000b5e:	2300      	moveq	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000b66:	f000 f804 	bl	8000b72 <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3740      	adds	r7, #64	@ 0x40
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b76:	b672      	cpsid	i
}
 8000b78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <Error_Handler+0x8>

08000b7e <_ZNSt5dequeIcSaIcEEC1Ev>:
      deque() = default;
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f825 	bl	8000bd8 <_ZNSt11_Deque_baseIcSaIcEEC1Ev>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_ZNSt5queueIcSt5dequeIcSaIcEEEC1IS2_vEEv>:
	queue()
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	: c() { }
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	2328      	movs	r3, #40	@ 0x28
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f002 f961 	bl	8002e70 <memset>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ffe4 	bl	8000b7e <_ZNSt5dequeIcSaIcEEC1Ev>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f002 f87a 	bl	8002cc2 <_ZNSaIcED1Ev>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_ZNSt11_Deque_baseIcSaIcEEC1Ev>:
      _Deque_base()
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f850 	bl	8000c88 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8000be8:	2100      	movs	r1, #0
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f85c 	bl	8000ca8 <_ZNSt11_Deque_baseIcSaIcEE17_M_initialize_mapEj>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_ZNSt11_Deque_baseIcSaIcEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d010      	beq.n	8000c2c <_ZNSt11_Deque_baseIcSaIcEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000c12:	3304      	adds	r3, #4
 8000c14:	461a      	mov	r2, r3
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f8a8 	bl	8000d6c <_ZNSt11_Deque_baseIcSaIcEE16_M_destroy_nodesEPPcS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6819      	ldr	r1, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	461a      	mov	r2, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f8bb 	bl	8000da2 <_ZNSt11_Deque_baseIcSaIcEE17_M_deallocate_mapEPPcj>
    }
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ffc6 	bl	8000bc0 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implD1Ev>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_ZNSt5dequeIcSaIcEED1Ev>:
      ~deque()
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b08a      	sub	sp, #40	@ 0x28
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f8c3 	bl	8000dd8 <_ZNSt5dequeIcSaIcEE5beginEv>
 8000c52:	f107 0318 	add.w	r3, r7, #24
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f8cc 	bl	8000df6 <_ZNSt5dequeIcSaIcEE3endEv>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f8d7 	bl	8000e14 <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f107 0218 	add.w	r2, r7, #24
 8000c6c:	f107 0108 	add.w	r1, r7, #8
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f8f4 	bl	8000e5e <_ZNSt5dequeIcSaIcEE15_M_destroy_dataESt15_Deque_iteratorIcRcPcES5_RKS0_>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ffbe 	bl	8000bfa <_ZNSt11_Deque_baseIcSaIcEED1Ev>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	3728      	adds	r7, #40	@ 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f002 f815 	bl	8002cc0 <_ZNSaIcEC1Ev>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f8ec 	bl	8000e76 <_ZNSt11_Deque_baseIcSaIcEE16_Deque_impl_dataC1Ev>
	{ }
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_ZNSt11_Deque_baseIcSaIcEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	@ 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fab0 	bl	8000218 <_ZSt16__deque_buf_sizej>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000cce:	f107 0210 	add.w	r2, r7, #16
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fc82 	bl	80005e2 <_ZSt3maxIjERKT_S2_S2_>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	4619      	mov	r1, r3
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f8db 	bl	8000ea8 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6859      	ldr	r1, [r3, #4]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	085b      	lsrs	r3, r3, #1
 8000d06:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000d08:	4413      	add	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4413      	add	r3, r2
 8000d14:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	69b9      	ldr	r1, [r7, #24]
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 f8e1 	bl	8000ee2 <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3308      	adds	r3, #8
 8000d24:	69b9      	ldr	r1, [r7, #24]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f8f6 	bl	8000f18 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f103 0218 	add.w	r2, r3, #24
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3b04      	subs	r3, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f000 f8ed 	bl	8000f18 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff fa64 	bl	8000218 <_ZSt16__deque_buf_sizej>
 8000d50:	4602      	mov	r2, r0
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d58:	fb01 f202 	mul.w	r2, r1, r2
 8000d5c:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8000d5e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	619a      	str	r2, [r3, #24]
    }
 8000d64:	bf00      	nop
 8000d66:	3724      	adds	r7, #36	@ 0x24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <_ZNSt11_Deque_baseIcSaIcEE16_M_destroy_nodesEPPcS3_>:
    _Deque_base<_Tp, _Alloc>::
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e008      	b.n	8000d90 <_ZNSt11_Deque_baseIcSaIcEE16_M_destroy_nodesEPPcS3_+0x24>
	_M_deallocate_node(*__n);
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f000 f8df 	bl	8000f48 <_ZNSt11_Deque_baseIcSaIcEE18_M_deallocate_nodeEPc>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3f2      	bcc.n	8000d7e <_ZNSt11_Deque_baseIcSaIcEE16_M_destroy_nodesEPPcS3_+0x12>
    }
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_ZNSt11_Deque_baseIcSaIcEE17_M_deallocate_mapEPPcj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	68f9      	ldr	r1, [r7, #12]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f8da 	bl	8000f6e <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f8f0 	bl	8000fa8 <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>
      }
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f8df 	bl	8000f90 <_ZNSaIPcED1Ev>
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_ZNSt5dequeIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	3308      	adds	r3, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f81d 	bl	8000e28 <_ZNSt15_Deque_iteratorIcRcPcEC1ERKS2_>
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_ZNSt5dequeIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	3318      	adds	r3, #24
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f80e 	bl	8000e28 <_ZNSt15_Deque_iteratorIcRcPcEC1ERKS2_>
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <_ZNSt15_Deque_iteratorIcRcPcEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <_ZNSt5dequeIcSaIcEE15_M_destroy_dataESt15_Deque_iteratorIcRcPcES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 8000e5e:	b480      	push	{r7}
 8000e60:	b08d      	sub	sp, #52	@ 0x34
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	603b      	str	r3, [r7, #0]
      }
 8000e6c:	bf00      	nop
 8000e6e:	3734      	adds	r7, #52	@ 0x34
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <_ZNSt11_Deque_baseIcSaIcEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3308      	adds	r3, #8
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f899 	bl	8000fc6 <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3318      	adds	r3, #24
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f894 	bl	8000fc6 <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>
	{ }
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f858 	bl	8000f6e <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f894 	bl	8000ff2 <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>
 8000eca:	4604      	mov	r4, r0
 8000ecc:	bf00      	nop
      }
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f85c 	bl	8000f90 <_ZNSaIPcED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8000ed8:	4623      	mov	r3, r4
      }
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd90      	pop	{r4, r7, pc}

08000ee2 <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_>:
    _Deque_base<_Tp, _Alloc>::
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e008      	b.n	8000f06 <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f000 f88b 	bl	8001010 <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3304      	adds	r3, #4
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d3f2      	bcc.n	8000ef4 <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_+0x12>
    }
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685c      	ldr	r4, [r3, #4]
 8000f34:	f000 f87e 	bl	8001034 <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	18e2      	adds	r2, r4, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
      }
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}

08000f48 <_ZNSt11_Deque_baseIcSaIcEE18_M_deallocate_nodeEPc>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8000f52:	687c      	ldr	r4, [r7, #4]
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff f95f 	bl	8000218 <_ZSt16__deque_buf_sizej>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	4620      	mov	r0, r4
 8000f62:	f000 f86f 	bl	8001044 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd90      	pop	{r4, r7, pc}

08000f6e <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8000f78:	6838      	ldr	r0, [r7, #0]
 8000f7a:	f000 f872 	bl	8001062 <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4619      	mov	r1, r3
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f877 	bl	8001076 <_ZNSaIPcEC1IcEERKSaIT_E>
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZNSaIPcED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f879 	bl	8001090 <_ZNSt15__new_allocatorIPcED1Ev>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 f873 	bl	80010a4 <_ZNSt15__new_allocatorIPcE10deallocateEPS0_j>
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f85f 	bl	80010c4 <_ZNSt15__new_allocatorIPcE8allocateEjPKv>
 8001006:	4603      	mov	r3, r0
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8001018:	687c      	ldr	r4, [r7, #4]
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff f8fc 	bl	8000218 <_ZSt16__deque_buf_sizej>
 8001020:	4603      	mov	r3, r0
 8001022:	4619      	mov	r1, r3
 8001024:	4620      	mov	r0, r4
 8001026:	f000 f876 	bl	8001116 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800102a:	4603      	mov	r3, r0
      }
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bd90      	pop	{r4, r7, pc}

08001034 <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff f8ed 	bl	8000218 <_ZSt16__deque_buf_sizej>
 800103e:	4603      	mov	r3, r0
 8001040:	4618      	mov	r0, r3
 8001042:	bd80      	pop	{r7, pc}

08001044 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 f86d 	bl	8001134 <_ZNSt15__new_allocatorIcE10deallocateEPcj>
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <_ZNSaIPcEC1IcEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f865 	bl	8001150 <_ZNSt15__new_allocatorIPcEC1Ev>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZNSt15__new_allocatorIPcED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <_ZNSt15__new_allocatorIPcE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4619      	mov	r1, r3
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f001 fdef 	bl	8002c9a <_ZdlPvj>
      }
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZNSt15__new_allocatorIPcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f000 f847 	bl	8001164 <_ZNKSt15__new_allocatorIPcE11_M_max_sizeEv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4293      	cmp	r3, r2
 80010dc:	bf8c      	ite	hi
 80010de:	2301      	movhi	r3, #1
 80010e0:	2300      	movls	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf14      	ite	ne
 80010e8:	2301      	movne	r3, #1
 80010ea:	2300      	moveq	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <_ZNSt15__new_allocatorIPcE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010f8:	d301      	bcc.n	80010fe <_ZNSt15__new_allocatorIPcE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80010fa:	f001 fde6 	bl	8002cca <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80010fe:	f001 fde1 	bl	8002cc4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4618      	mov	r0, r3
 8001108:	f001 fdc9 	bl	8002c9e <_Znwj>
 800110c:	4603      	mov	r3, r0
      }
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001120:	2200      	movs	r2, #0
 8001122:	6839      	ldr	r1, [r7, #0]
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f828 	bl	800117a <_ZNSt15__new_allocatorIcE8allocateEjPKv>
 800112a:	4603      	mov	r3, r0
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZNSt15__new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	68b8      	ldr	r0, [r7, #8]
 8001144:	f001 fda9 	bl	8002c9a <_ZdlPvj>
      }
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_ZNSt15__new_allocatorIPcEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <_ZNKSt15__new_allocatorIPcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800116c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <_ZNSt15__new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f818 	bl	80011bc <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4293      	cmp	r3, r2
 8001192:	bf8c      	ite	hi
 8001194:	2301      	movhi	r3, #1
 8001196:	2300      	movls	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf14      	ite	ne
 800119e:	2301      	movne	r3, #1
 80011a0:	2300      	moveq	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <_ZNSt15__new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 80011a8:	f001 fd8c 	bl	8002cc4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80011ac:	68b8      	ldr	r0, [r7, #8]
 80011ae:	f001 fd76 	bl	8002c9e <_Znwj>
 80011b2:	4603      	mov	r3, r0
      }
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80011c4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      }
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <_ZNSt5queueIcSt5dequeIcSaIcEEED1Ev>:
    class queue
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fd2e 	bl	8000c3e <_ZNSt5dequeIcSaIcEED1Ev>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_Z41__static_initialization_and_destruction_0ii>:
void beginSpeedMode(){
    while (!speedModeQueue.empty()) {
        mouseMove(speedModeQueue.front());
        speedModeQueue.pop();
    }
}
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d107      	bne.n	800120c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001202:	4293      	cmp	r3, r2
 8001204:	d102      	bne.n	800120c <_Z41__static_initialization_and_destruction_0ii+0x20>
std::queue<char> speedModeQueue;
 8001206:	4809      	ldr	r0, [pc, #36]	@ (800122c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001208:	f7ff fcc6 	bl	8000b98 <_ZNSt5queueIcSt5dequeIcSaIcEEEC1IS2_vEEv>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d107      	bne.n	8001222 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001218:	4293      	cmp	r3, r2
 800121a:	d102      	bne.n	8001222 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800121c:	4803      	ldr	r0, [pc, #12]	@ (800122c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800121e:	f7ff ffd8 	bl	80011d2 <_ZNSt5queueIcSt5dequeIcSaIcEEED1Ev>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200010a0 	.word	0x200010a0

08001230 <_GLOBAL__sub_I_speedModeQueue>:
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
 8001234:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff ffd7 	bl	80011ec <_Z41__static_initialization_and_destruction_0ii>
 800123e:	bd80      	pop	{r7, pc}

08001240 <_GLOBAL__sub_D_speedModeQueue>:
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
 8001244:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff ffcf 	bl	80011ec <_Z41__static_initialization_and_destruction_0ii>
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_MspInit+0x5c>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a14      	ldr	r2, [pc, #80]	@ (80012ac <HAL_MspInit+0x5c>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6193      	str	r3, [r2, #24]
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_MspInit+0x5c>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_MspInit+0x5c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a0e      	ldr	r2, [pc, #56]	@ (80012ac <HAL_MspInit+0x5c>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <HAL_MspInit+0x5c>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_MspInit+0x60>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <HAL_MspInit+0x60>)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <NMI_Handler+0x4>

080012bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <MemManage_Handler+0x4>

080012cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <UsageFault_Handler+0x4>

080012dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 f9c6 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return 1;
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <_kill>:

int _kill(int pid, int sig)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001324:	f001 fe00 	bl	8002f28 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	2216      	movs	r2, #22
 800132c:	601a      	str	r2, [r3, #0]
  return -1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_exit>:

void _exit (int status)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001342:	f04f 31ff 	mov.w	r1, #4294967295
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffe7 	bl	800131a <_kill>
  while (1) {}    /* Make sure we hang here */
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <_exit+0x12>

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f001 fdd2 	bl	8002f28 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20005000 	.word	0x20005000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	200010c8 	.word	0x200010c8
 80013b8:	20001268 	.word	0x20001268

080013bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b092      	sub	sp, #72	@ 0x48
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2220      	movs	r2, #32
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fd3c 	bl	8002e70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f8:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <MX_TIM1_Init+0x148>)
 80013fa:	4a46      	ldr	r2, [pc, #280]	@ (8001514 <MX_TIM1_Init+0x14c>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013fe:	4b44      	ldr	r3, [pc, #272]	@ (8001510 <MX_TIM1_Init+0x148>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <MX_TIM1_Init+0x148>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <MX_TIM1_Init+0x148>)
 800140c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001410:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b3f      	ldr	r3, [pc, #252]	@ (8001510 <MX_TIM1_Init+0x148>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001418:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <MX_TIM1_Init+0x148>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141e:	4b3c      	ldr	r3, [pc, #240]	@ (8001510 <MX_TIM1_Init+0x148>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001424:	483a      	ldr	r0, [pc, #232]	@ (8001510 <MX_TIM1_Init+0x148>)
 8001426:	f000 ffbb 	bl	80023a0 <HAL_TIM_PWM_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001430:	f7ff fb9f 	bl	8000b72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001440:	4619      	mov	r1, r3
 8001442:	4833      	ldr	r0, [pc, #204]	@ (8001510 <MX_TIM1_Init+0x148>)
 8001444:	f001 fb7a 	bl	8002b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800144e:	f7ff fb90 	bl	8000b72 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001452:	2360      	movs	r3, #96	@ 0x60
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800145e:	2300      	movs	r3, #0
 8001460:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	2200      	movs	r2, #0
 8001474:	4619      	mov	r1, r3
 8001476:	4826      	ldr	r0, [pc, #152]	@ (8001510 <MX_TIM1_Init+0x148>)
 8001478:	f001 f884 	bl	8002584 <HAL_TIM_PWM_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001482:	f7ff fb76 	bl	8000b72 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148a:	2204      	movs	r2, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4820      	ldr	r0, [pc, #128]	@ (8001510 <MX_TIM1_Init+0x148>)
 8001490:	f001 f878 	bl	8002584 <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800149a:	f7ff fb6a 	bl	8000b72 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800149e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a2:	2208      	movs	r2, #8
 80014a4:	4619      	mov	r1, r3
 80014a6:	481a      	ldr	r0, [pc, #104]	@ (8001510 <MX_TIM1_Init+0x148>)
 80014a8:	f001 f86c 	bl	8002584 <HAL_TIM_PWM_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80014b2:	f7ff fb5e 	bl	8000b72 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ba:	220c      	movs	r2, #12
 80014bc:	4619      	mov	r1, r3
 80014be:	4814      	ldr	r0, [pc, #80]	@ (8001510 <MX_TIM1_Init+0x148>)
 80014c0:	f001 f860 	bl	8002584 <HAL_TIM_PWM_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80014ca:	f7ff fb52 	bl	8000b72 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	@ (8001510 <MX_TIM1_Init+0x148>)
 80014f2:	f001 fb81 	bl	8002bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80014fc:	f7ff fb39 	bl	8000b72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001500:	4803      	ldr	r0, [pc, #12]	@ (8001510 <MX_TIM1_Init+0x148>)
 8001502:	f000 f827 	bl	8001554 <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3748      	adds	r7, #72	@ 0x48
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200010cc 	.word	0x200010cc
 8001514:	40012c00 	.word	0x40012c00

08001518 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <HAL_TIM_PWM_MspInit+0x34>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10b      	bne.n	8001542 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_TIM_PWM_MspInit+0x38>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <HAL_TIM_PWM_MspInit+0x38>)
 8001530:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001534:	6193      	str	r3, [r2, #24]
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_TIM_PWM_MspInit+0x38>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	40012c00 	.word	0x40012c00
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a10      	ldr	r2, [pc, #64]	@ (80015b0 <HAL_TIM_MspPostInit+0x5c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d118      	bne.n	80015a6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <HAL_TIM_MspPostInit+0x60>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a0e      	ldr	r2, [pc, #56]	@ (80015b4 <HAL_TIM_MspPostInit+0x60>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <HAL_TIM_MspPostInit+0x60>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LForward_Pin|LBack_Pin|RForward_Pin|GPIO_PIN_11;
 800158c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2302      	movs	r3, #2
 8001598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <HAL_TIM_MspPostInit+0x64>)
 80015a2:	f000 f99b 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40012c00 	.word	0x40012c00
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010800 	.word	0x40010800

080015bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff fefe 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480b      	ldr	r0, [pc, #44]	@ (80015f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015c2:	490c      	ldr	r1, [pc, #48]	@ (80015f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015c4:	4a0c      	ldr	r2, [pc, #48]	@ (80015f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015d8:	4c09      	ldr	r4, [pc, #36]	@ (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f001 fca5 	bl	8002f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ea:	f7ff fa43 	bl	8000a74 <main>
  bx lr
 80015ee:	4770      	bx	lr
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015f8:	08003064 	.word	0x08003064
  ldr r2, =_sbss
 80015fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001600:	20001264 	.word	0x20001264

08001604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <HAL_Init+0x28>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <HAL_Init+0x28>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 f92b 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	200f      	movs	r0, #15
 8001620:	f000 f808 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff fe14 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f935 	bl	80018c2 <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f000 f90b 	bl	800188a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	@ (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	20000008 	.word	0x20000008
 8001690:	20000004 	.word	0x20000004

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <HAL_IncTick+0x1c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_IncTick+0x20>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a03      	ldr	r2, [pc, #12]	@ (80016b4 <HAL_IncTick+0x20>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20001114 	.word	0x20001114

080016b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b02      	ldr	r3, [pc, #8]	@ (80016c8 <HAL_GetTick+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20001114 	.word	0x20001114

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fff0 	bl	80016b8 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffe0 	bl	80016b8 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000008 	.word	0x20000008

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f7ff ff90 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff49 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff5e 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff90 	bl	80017cc <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5f 	bl	8001778 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffb0 	bl	8001830 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b08b      	sub	sp, #44	@ 0x2c
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ee:	e169      	b.n	8001bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018f0:	2201      	movs	r2, #1
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	429a      	cmp	r2, r3
 800190a:	f040 8158 	bne.w	8001bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a9a      	ldr	r2, [pc, #616]	@ (8001b7c <HAL_GPIO_Init+0x2a0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d05e      	beq.n	80019d6 <HAL_GPIO_Init+0xfa>
 8001918:	4a98      	ldr	r2, [pc, #608]	@ (8001b7c <HAL_GPIO_Init+0x2a0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d875      	bhi.n	8001a0a <HAL_GPIO_Init+0x12e>
 800191e:	4a98      	ldr	r2, [pc, #608]	@ (8001b80 <HAL_GPIO_Init+0x2a4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d058      	beq.n	80019d6 <HAL_GPIO_Init+0xfa>
 8001924:	4a96      	ldr	r2, [pc, #600]	@ (8001b80 <HAL_GPIO_Init+0x2a4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d86f      	bhi.n	8001a0a <HAL_GPIO_Init+0x12e>
 800192a:	4a96      	ldr	r2, [pc, #600]	@ (8001b84 <HAL_GPIO_Init+0x2a8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d052      	beq.n	80019d6 <HAL_GPIO_Init+0xfa>
 8001930:	4a94      	ldr	r2, [pc, #592]	@ (8001b84 <HAL_GPIO_Init+0x2a8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d869      	bhi.n	8001a0a <HAL_GPIO_Init+0x12e>
 8001936:	4a94      	ldr	r2, [pc, #592]	@ (8001b88 <HAL_GPIO_Init+0x2ac>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d04c      	beq.n	80019d6 <HAL_GPIO_Init+0xfa>
 800193c:	4a92      	ldr	r2, [pc, #584]	@ (8001b88 <HAL_GPIO_Init+0x2ac>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d863      	bhi.n	8001a0a <HAL_GPIO_Init+0x12e>
 8001942:	4a92      	ldr	r2, [pc, #584]	@ (8001b8c <HAL_GPIO_Init+0x2b0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d046      	beq.n	80019d6 <HAL_GPIO_Init+0xfa>
 8001948:	4a90      	ldr	r2, [pc, #576]	@ (8001b8c <HAL_GPIO_Init+0x2b0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d85d      	bhi.n	8001a0a <HAL_GPIO_Init+0x12e>
 800194e:	2b12      	cmp	r3, #18
 8001950:	d82a      	bhi.n	80019a8 <HAL_GPIO_Init+0xcc>
 8001952:	2b12      	cmp	r3, #18
 8001954:	d859      	bhi.n	8001a0a <HAL_GPIO_Init+0x12e>
 8001956:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <HAL_GPIO_Init+0x80>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	080019d7 	.word	0x080019d7
 8001960:	080019b1 	.word	0x080019b1
 8001964:	080019c3 	.word	0x080019c3
 8001968:	08001a05 	.word	0x08001a05
 800196c:	08001a0b 	.word	0x08001a0b
 8001970:	08001a0b 	.word	0x08001a0b
 8001974:	08001a0b 	.word	0x08001a0b
 8001978:	08001a0b 	.word	0x08001a0b
 800197c:	08001a0b 	.word	0x08001a0b
 8001980:	08001a0b 	.word	0x08001a0b
 8001984:	08001a0b 	.word	0x08001a0b
 8001988:	08001a0b 	.word	0x08001a0b
 800198c:	08001a0b 	.word	0x08001a0b
 8001990:	08001a0b 	.word	0x08001a0b
 8001994:	08001a0b 	.word	0x08001a0b
 8001998:	08001a0b 	.word	0x08001a0b
 800199c:	08001a0b 	.word	0x08001a0b
 80019a0:	080019b9 	.word	0x080019b9
 80019a4:	080019cd 	.word	0x080019cd
 80019a8:	4a79      	ldr	r2, [pc, #484]	@ (8001b90 <HAL_GPIO_Init+0x2b4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ae:	e02c      	b.n	8001a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	623b      	str	r3, [r7, #32]
          break;
 80019b6:	e029      	b.n	8001a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	3304      	adds	r3, #4
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e024      	b.n	8001a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	3308      	adds	r3, #8
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e01f      	b.n	8001a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	330c      	adds	r3, #12
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e01a      	b.n	8001a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019de:	2304      	movs	r3, #4
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e013      	b.n	8001a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ec:	2308      	movs	r3, #8
 80019ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	611a      	str	r2, [r3, #16]
          break;
 80019f6:	e009      	b.n	8001a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f8:	2308      	movs	r3, #8
 80019fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	615a      	str	r2, [r3, #20]
          break;
 8001a02:	e003      	b.n	8001a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
          break;
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x130>
          break;
 8001a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2bff      	cmp	r3, #255	@ 0xff
 8001a10:	d801      	bhi.n	8001a16 <HAL_GPIO_Init+0x13a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	e001      	b.n	8001a1a <HAL_GPIO_Init+0x13e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2bff      	cmp	r3, #255	@ 0xff
 8001a20:	d802      	bhi.n	8001a28 <HAL_GPIO_Init+0x14c>
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x152>
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	3b08      	subs	r3, #8
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	210f      	movs	r1, #15
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	401a      	ands	r2, r3
 8001a40:	6a39      	ldr	r1, [r7, #32]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80b1 	beq.w	8001bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b94 <HAL_GPIO_Init+0x2b8>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a4c      	ldr	r2, [pc, #304]	@ (8001b94 <HAL_GPIO_Init+0x2b8>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b4a      	ldr	r3, [pc, #296]	@ (8001b94 <HAL_GPIO_Init+0x2b8>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a74:	4a48      	ldr	r2, [pc, #288]	@ (8001b98 <HAL_GPIO_Init+0x2bc>)
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a40      	ldr	r2, [pc, #256]	@ (8001b9c <HAL_GPIO_Init+0x2c0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d013      	beq.n	8001ac8 <HAL_GPIO_Init+0x1ec>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ba0 <HAL_GPIO_Init+0x2c4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_GPIO_Init+0x1e8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba4 <HAL_GPIO_Init+0x2c8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d007      	beq.n	8001ac0 <HAL_GPIO_Init+0x1e4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ba8 <HAL_GPIO_Init+0x2cc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_GPIO_Init+0x1e0>
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e006      	b.n	8001aca <HAL_GPIO_Init+0x1ee>
 8001abc:	2304      	movs	r3, #4
 8001abe:	e004      	b.n	8001aca <HAL_GPIO_Init+0x1ee>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e002      	b.n	8001aca <HAL_GPIO_Init+0x1ee>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_GPIO_Init+0x1ee>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001acc:	f002 0203 	and.w	r2, r2, #3
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	4093      	lsls	r3, r2
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ada:	492f      	ldr	r1, [pc, #188]	@ (8001b98 <HAL_GPIO_Init+0x2bc>)
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af4:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	492c      	ldr	r1, [pc, #176]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b02:	4b2a      	ldr	r3, [pc, #168]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4928      	ldr	r1, [pc, #160]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b1c:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	4922      	ldr	r1, [pc, #136]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b2a:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	491e      	ldr	r1, [pc, #120]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4918      	ldr	r1, [pc, #96]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4914      	ldr	r1, [pc, #80]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d021      	beq.n	8001bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	490e      	ldr	r1, [pc, #56]	@ (8001bac <HAL_GPIO_Init+0x2d0>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e021      	b.n	8001bbe <HAL_GPIO_Init+0x2e2>
 8001b7a:	bf00      	nop
 8001b7c:	10320000 	.word	0x10320000
 8001b80:	10310000 	.word	0x10310000
 8001b84:	10220000 	.word	0x10220000
 8001b88:	10210000 	.word	0x10210000
 8001b8c:	10120000 	.word	0x10120000
 8001b90:	10110000 	.word	0x10110000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	40010800 	.word	0x40010800
 8001ba0:	40010c00 	.word	0x40010c00
 8001ba4:	40011000 	.word	0x40011000
 8001ba8:	40011400 	.word	0x40011400
 8001bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_GPIO_Init+0x304>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	4909      	ldr	r1, [pc, #36]	@ (8001be0 <HAL_GPIO_Init+0x304>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f47f ae8e 	bne.w	80018f0 <HAL_GPIO_Init+0x14>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	372c      	adds	r7, #44	@ 0x2c
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e272      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8087 	beq.w	8001d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	4b92      	ldr	r3, [pc, #584]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c10:	4b8f      	ldr	r3, [pc, #572]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d112      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c28:	d10b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2a:	4b89      	ldr	r3, [pc, #548]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x12c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d168      	bne.n	8001d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e24c      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x76>
 8001c4c:	4b80      	ldr	r3, [pc, #512]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7f      	ldr	r2, [pc, #508]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e02e      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x98>
 8001c62:	4b7b      	ldr	r3, [pc, #492]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7a      	ldr	r2, [pc, #488]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b78      	ldr	r3, [pc, #480]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a77      	ldr	r2, [pc, #476]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xbc>
 8001c86:	4b72      	ldr	r3, [pc, #456]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a71      	ldr	r2, [pc, #452]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6f      	ldr	r3, [pc, #444]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6e      	ldr	r2, [pc, #440]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b68      	ldr	r3, [pc, #416]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a67      	ldr	r2, [pc, #412]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fcfa 	bl	80016b8 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fcf6 	bl	80016b8 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e200      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5d      	ldr	r3, [pc, #372]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe4>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fce6 	bl	80016b8 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fce2 	bl	80016b8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1ec      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b53      	ldr	r3, [pc, #332]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x10c>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2a:	4b49      	ldr	r3, [pc, #292]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
 8001d36:	4b46      	ldr	r3, [pc, #280]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1c0      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4939      	ldr	r1, [pc, #228]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b36      	ldr	r3, [pc, #216]	@ (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fc9b 	bl	80016b8 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff fc97 	bl	80016b8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1a1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4927      	ldr	r1, [pc, #156]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fc7a 	bl	80016b8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fc76 	bl	80016b8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e180      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03a      	beq.n	8001e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fc5a 	bl	80016b8 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff fc56 	bl	80016b8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e160      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f000 fa9c 	bl	8002364 <RCC_Delay>
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff fc40 	bl	80016b8 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fc3c 	bl	80016b8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d908      	bls.n	8001e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e146      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	42420000 	.word	0x42420000
 8001e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b92      	ldr	r3, [pc, #584]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e9      	bne.n	8001e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a6 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b88      	ldr	r3, [pc, #544]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a87      	ldr	r2, [pc, #540]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b85      	ldr	r3, [pc, #532]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b82      	ldr	r3, [pc, #520]	@ (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d118      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b7f      	ldr	r3, [pc, #508]	@ (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7ff fbfd 	bl	80016b8 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7ff fbf9 	bl	80016b8 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	@ 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e103      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	4b75      	ldr	r3, [pc, #468]	@ (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x312>
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a6e      	ldr	r2, [pc, #440]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e02d      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x334>
 8001efe:	4b6a      	ldr	r3, [pc, #424]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a69      	ldr	r2, [pc, #420]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	4b67      	ldr	r3, [pc, #412]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a66      	ldr	r2, [pc, #408]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	e01c      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x356>
 8001f20:	4b61      	ldr	r3, [pc, #388]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a60      	ldr	r2, [pc, #384]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a5d      	ldr	r2, [pc, #372]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a5a      	ldr	r2, [pc, #360]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b58      	ldr	r3, [pc, #352]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a57      	ldr	r2, [pc, #348]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d015      	beq.n	8001f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fbad 	bl	80016b8 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff fba9 	bl	80016b8 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0b1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	4b4b      	ldr	r3, [pc, #300]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ee      	beq.n	8001f62 <HAL_RCC_OscConfig+0x37e>
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fb97 	bl	80016b8 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff fb93 	bl	80016b8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e09b      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	4b40      	ldr	r3, [pc, #256]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ee      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a3b      	ldr	r2, [pc, #236]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fcc:	4b36      	ldr	r3, [pc, #216]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d061      	beq.n	800209c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d146      	bne.n	800206e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b33      	ldr	r3, [pc, #204]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fb67 	bl	80016b8 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff fb63 	bl	80016b8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e06d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	4b29      	ldr	r3, [pc, #164]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002014:	d108      	bne.n	8002028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4921      	ldr	r1, [pc, #132]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002028:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a19      	ldr	r1, [r3, #32]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	430b      	orrs	r3, r1
 800203a:	491b      	ldr	r1, [pc, #108]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff fb37 	bl	80016b8 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff fb33 	bl	80016b8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e03d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x46a>
 800206c:	e035      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fb20 	bl	80016b8 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207c:	f7ff fb1c 	bl	80016b8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e026      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x498>
 800209a:	e01e      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e019      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
 80020b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_RCC_OscConfig+0x500>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0d0      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b6a      	ldr	r3, [pc, #424]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d910      	bls.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b67      	ldr	r3, [pc, #412]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4965      	ldr	r1, [pc, #404]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b63      	ldr	r3, [pc, #396]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0b8      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a58      	ldr	r2, [pc, #352]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800214e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215c:	4b53      	ldr	r3, [pc, #332]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	494d      	ldr	r1, [pc, #308]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d040      	beq.n	8002208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b47      	ldr	r3, [pc, #284]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d115      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07f      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	4b41      	ldr	r3, [pc, #260]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e073      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06b      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c6:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f023 0203 	bic.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4936      	ldr	r1, [pc, #216]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d8:	f7ff fa6e 	bl	80016b8 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e0:	f7ff fa6a 	bl	80016b8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e053      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	4b2d      	ldr	r3, [pc, #180]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 020c 	and.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	429a      	cmp	r2, r3
 8002206:	d1eb      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002208:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d210      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b24      	ldr	r3, [pc, #144]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4922      	ldr	r1, [pc, #136]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4916      	ldr	r1, [pc, #88]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490e      	ldr	r1, [pc, #56]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f821 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490a      	ldr	r1, [pc, #40]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a09      	ldr	r2, [pc, #36]	@ (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002292:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f9cc 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08003028 	.word	0x08003028
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d002      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x30>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ea:	e027      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	613b      	str	r3, [r7, #16]
      break;
 80022f0:	e027      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0c9b      	lsrs	r3, r3, #18
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d010      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230a:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0c5b      	lsrs	r3, r3, #17
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a0d      	ldr	r2, [pc, #52]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800231e:	fb03 f202 	mul.w	r2, r3, r2
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e004      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a0c      	ldr	r2, [pc, #48]	@ (8002360 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	613b      	str	r3, [r7, #16]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800233e:	613b      	str	r3, [r7, #16]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	693b      	ldr	r3, [r7, #16]
}
 8002344:	4618      	mov	r0, r3
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	007a1200 	.word	0x007a1200
 8002358:	08003038 	.word	0x08003038
 800235c:	08003048 	.word	0x08003048
 8002360:	003d0900 	.word	0x003d0900

08002364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800236c:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <RCC_Delay+0x34>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <RCC_Delay+0x38>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0a5b      	lsrs	r3, r3, #9
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002380:	bf00      	nop
  }
  while (Delay --);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	60fa      	str	r2, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f9      	bne.n	8002380 <RCC_Delay+0x1c>
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	20000000 	.word	0x20000000
 800239c:	10624dd3 	.word	0x10624dd3

080023a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e041      	b.n	8002436 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff f8a6 	bl	8001518 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3304      	adds	r3, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f000 f992 	bl	8002708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_TIM_PWM_Start+0x24>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e022      	b.n	80024aa <HAL_TIM_PWM_Start+0x6a>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b04      	cmp	r3, #4
 8002468:	d109      	bne.n	800247e <HAL_TIM_PWM_Start+0x3e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	e015      	b.n	80024aa <HAL_TIM_PWM_Start+0x6a>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d109      	bne.n	8002498 <HAL_TIM_PWM_Start+0x58>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	bf14      	ite	ne
 8002490:	2301      	movne	r3, #1
 8002492:	2300      	moveq	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e008      	b.n	80024aa <HAL_TIM_PWM_Start+0x6a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e05e      	b.n	8002570 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d104      	bne.n	80024c2 <HAL_TIM_PWM_Start+0x82>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024c0:	e013      	b.n	80024ea <HAL_TIM_PWM_Start+0xaa>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d104      	bne.n	80024d2 <HAL_TIM_PWM_Start+0x92>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024d0:	e00b      	b.n	80024ea <HAL_TIM_PWM_Start+0xaa>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d104      	bne.n	80024e2 <HAL_TIM_PWM_Start+0xa2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024e0:	e003      	b.n	80024ea <HAL_TIM_PWM_Start+0xaa>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fafe 	bl	8002af4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002578 <HAL_TIM_PWM_Start+0x138>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d107      	bne.n	8002512 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a18      	ldr	r2, [pc, #96]	@ (8002578 <HAL_TIM_PWM_Start+0x138>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00e      	beq.n	800253a <HAL_TIM_PWM_Start+0xfa>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002524:	d009      	beq.n	800253a <HAL_TIM_PWM_Start+0xfa>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a14      	ldr	r2, [pc, #80]	@ (800257c <HAL_TIM_PWM_Start+0x13c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_TIM_PWM_Start+0xfa>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <HAL_TIM_PWM_Start+0x140>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d111      	bne.n	800255e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b06      	cmp	r3, #6
 800254a:	d010      	beq.n	800256e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255c:	e007      	b.n	800256e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40000400 	.word	0x40000400
 8002580:	40000800 	.word	0x40000800

08002584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800259e:	2302      	movs	r3, #2
 80025a0:	e0ae      	b.n	8002700 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0c      	cmp	r3, #12
 80025ae:	f200 809f 	bhi.w	80026f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025b2:	a201      	add	r2, pc, #4	@ (adr r2, 80025b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025ed 	.word	0x080025ed
 80025bc:	080026f1 	.word	0x080026f1
 80025c0:	080026f1 	.word	0x080026f1
 80025c4:	080026f1 	.word	0x080026f1
 80025c8:	0800262d 	.word	0x0800262d
 80025cc:	080026f1 	.word	0x080026f1
 80025d0:	080026f1 	.word	0x080026f1
 80025d4:	080026f1 	.word	0x080026f1
 80025d8:	0800266f 	.word	0x0800266f
 80025dc:	080026f1 	.word	0x080026f1
 80025e0:	080026f1 	.word	0x080026f1
 80025e4:	080026f1 	.word	0x080026f1
 80025e8:	080026af 	.word	0x080026af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f8f6 	bl	80027e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0208 	orr.w	r2, r2, #8
 8002606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0204 	bic.w	r2, r2, #4
 8002616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6999      	ldr	r1, [r3, #24]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	619a      	str	r2, [r3, #24]
      break;
 800262a:	e064      	b.n	80026f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f93c 	bl	80028b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6999      	ldr	r1, [r3, #24]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	021a      	lsls	r2, r3, #8
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	619a      	str	r2, [r3, #24]
      break;
 800266c:	e043      	b.n	80026f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f985 	bl	8002984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0208 	orr.w	r2, r2, #8
 8002688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0204 	bic.w	r2, r2, #4
 8002698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69d9      	ldr	r1, [r3, #28]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	61da      	str	r2, [r3, #28]
      break;
 80026ac:	e023      	b.n	80026f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f9cf 	bl	8002a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69d9      	ldr	r1, [r3, #28]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	021a      	lsls	r2, r3, #8
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	61da      	str	r2, [r3, #28]
      break;
 80026ee:	e002      	b.n	80026f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	75fb      	strb	r3, [r7, #23]
      break;
 80026f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a2f      	ldr	r2, [pc, #188]	@ (80027d8 <TIM_Base_SetConfig+0xd0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00b      	beq.n	8002738 <TIM_Base_SetConfig+0x30>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002726:	d007      	beq.n	8002738 <TIM_Base_SetConfig+0x30>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a2c      	ldr	r2, [pc, #176]	@ (80027dc <TIM_Base_SetConfig+0xd4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0x30>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a2b      	ldr	r2, [pc, #172]	@ (80027e0 <TIM_Base_SetConfig+0xd8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d108      	bne.n	800274a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a22      	ldr	r2, [pc, #136]	@ (80027d8 <TIM_Base_SetConfig+0xd0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00b      	beq.n	800276a <TIM_Base_SetConfig+0x62>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002758:	d007      	beq.n	800276a <TIM_Base_SetConfig+0x62>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1f      	ldr	r2, [pc, #124]	@ (80027dc <TIM_Base_SetConfig+0xd4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_Base_SetConfig+0x62>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1e      	ldr	r2, [pc, #120]	@ (80027e0 <TIM_Base_SetConfig+0xd8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a0d      	ldr	r2, [pc, #52]	@ (80027d8 <TIM_Base_SetConfig+0xd0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d103      	bne.n	80027b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f023 0201 	bic.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	611a      	str	r2, [r3, #16]
  }
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800

080027e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f023 0201 	bic.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f023 0302 	bic.w	r3, r3, #2
 800282c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <TIM_OC1_SetConfig+0xc8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10c      	bne.n	800285a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f023 0308 	bic.w	r3, r3, #8
 8002846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <TIM_OC1_SetConfig+0xc8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d111      	bne.n	8002886 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40012c00 	.word	0x40012c00

080028b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f023 0210 	bic.w	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0320 	bic.w	r3, r3, #32
 80028fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a1d      	ldr	r2, [pc, #116]	@ (8002980 <TIM_OC2_SetConfig+0xd0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d10d      	bne.n	800292c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800292a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a14      	ldr	r2, [pc, #80]	@ (8002980 <TIM_OC2_SetConfig+0xd0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d113      	bne.n	800295c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800293a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	621a      	str	r2, [r3, #32]
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00

08002984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a54 <TIM_OC3_SetConfig+0xd0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10d      	bne.n	80029fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a14      	ldr	r2, [pc, #80]	@ (8002a54 <TIM_OC3_SetConfig+0xd0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d113      	bne.n	8002a2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	621a      	str	r2, [r3, #32]
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40012c00 	.word	0x40012c00

08002a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	031b      	lsls	r3, r3, #12
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <TIM_OC4_SetConfig+0x98>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d109      	bne.n	8002acc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	019b      	lsls	r3, r3, #6
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40012c00 	.word	0x40012c00

08002af4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	2201      	movs	r2, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	401a      	ands	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	621a      	str	r2, [r3, #32]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e046      	b.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a16      	ldr	r2, [pc, #88]	@ (8002bec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba0:	d009      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a12      	ldr	r2, [pc, #72]	@ (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a10      	ldr	r2, [pc, #64]	@ (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e03d      	b.n	8002c90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <_ZdlPvj>:
 8002c9a:	f000 b819 	b.w	8002cd0 <_ZdlPv>

08002c9e <_Znwj>:
 8002c9e:	2801      	cmp	r0, #1
 8002ca0:	bf38      	it	cc
 8002ca2:	2001      	movcc	r0, #1
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f000 f823 	bl	8002cf4 <malloc>
 8002cae:	b100      	cbz	r0, 8002cb2 <_Znwj+0x14>
 8002cb0:	bd10      	pop	{r4, pc}
 8002cb2:	f000 f80f 	bl	8002cd4 <_ZSt15get_new_handlerv>
 8002cb6:	b908      	cbnz	r0, 8002cbc <_Znwj+0x1e>
 8002cb8:	f000 f814 	bl	8002ce4 <abort>
 8002cbc:	4780      	blx	r0
 8002cbe:	e7f3      	b.n	8002ca8 <_Znwj+0xa>

08002cc0 <_ZNSaIcEC1Ev>:
 8002cc0:	4770      	bx	lr

08002cc2 <_ZNSaIcED1Ev>:
 8002cc2:	4770      	bx	lr

08002cc4 <_ZSt17__throw_bad_allocv>:
 8002cc4:	b508      	push	{r3, lr}
 8002cc6:	f000 f80d 	bl	8002ce4 <abort>

08002cca <_ZSt28__throw_bad_array_new_lengthv>:
 8002cca:	b508      	push	{r3, lr}
 8002ccc:	f000 f80a 	bl	8002ce4 <abort>

08002cd0 <_ZdlPv>:
 8002cd0:	f000 b818 	b.w	8002d04 <free>

08002cd4 <_ZSt15get_new_handlerv>:
 8002cd4:	4b02      	ldr	r3, [pc, #8]	@ (8002ce0 <_ZSt15get_new_handlerv+0xc>)
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	f3bf 8f5b 	dmb	ish
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20001118 	.word	0x20001118

08002ce4 <abort>:
 8002ce4:	2006      	movs	r0, #6
 8002ce6:	b508      	push	{r3, lr}
 8002ce8:	f000 f8f2 	bl	8002ed0 <raise>
 8002cec:	2001      	movs	r0, #1
 8002cee:	f7fe fb24 	bl	800133a <_exit>
	...

08002cf4 <malloc>:
 8002cf4:	4b02      	ldr	r3, [pc, #8]	@ (8002d00 <malloc+0xc>)
 8002cf6:	4601      	mov	r1, r0
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	f000 b82d 	b.w	8002d58 <_malloc_r>
 8002cfe:	bf00      	nop
 8002d00:	2000000c 	.word	0x2000000c

08002d04 <free>:
 8002d04:	4b02      	ldr	r3, [pc, #8]	@ (8002d10 <free+0xc>)
 8002d06:	4601      	mov	r1, r0
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	f000 b939 	b.w	8002f80 <_free_r>
 8002d0e:	bf00      	nop
 8002d10:	2000000c 	.word	0x2000000c

08002d14 <sbrk_aligned>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4e0f      	ldr	r6, [pc, #60]	@ (8002d54 <sbrk_aligned+0x40>)
 8002d18:	460c      	mov	r4, r1
 8002d1a:	6831      	ldr	r1, [r6, #0]
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	b911      	cbnz	r1, 8002d26 <sbrk_aligned+0x12>
 8002d20:	f000 f8f2 	bl	8002f08 <_sbrk_r>
 8002d24:	6030      	str	r0, [r6, #0]
 8002d26:	4621      	mov	r1, r4
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f000 f8ed 	bl	8002f08 <_sbrk_r>
 8002d2e:	1c43      	adds	r3, r0, #1
 8002d30:	d103      	bne.n	8002d3a <sbrk_aligned+0x26>
 8002d32:	f04f 34ff 	mov.w	r4, #4294967295
 8002d36:	4620      	mov	r0, r4
 8002d38:	bd70      	pop	{r4, r5, r6, pc}
 8002d3a:	1cc4      	adds	r4, r0, #3
 8002d3c:	f024 0403 	bic.w	r4, r4, #3
 8002d40:	42a0      	cmp	r0, r4
 8002d42:	d0f8      	beq.n	8002d36 <sbrk_aligned+0x22>
 8002d44:	1a21      	subs	r1, r4, r0
 8002d46:	4628      	mov	r0, r5
 8002d48:	f000 f8de 	bl	8002f08 <_sbrk_r>
 8002d4c:	3001      	adds	r0, #1
 8002d4e:	d1f2      	bne.n	8002d36 <sbrk_aligned+0x22>
 8002d50:	e7ef      	b.n	8002d32 <sbrk_aligned+0x1e>
 8002d52:	bf00      	nop
 8002d54:	2000111c 	.word	0x2000111c

08002d58 <_malloc_r>:
 8002d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d5c:	1ccd      	adds	r5, r1, #3
 8002d5e:	f025 0503 	bic.w	r5, r5, #3
 8002d62:	3508      	adds	r5, #8
 8002d64:	2d0c      	cmp	r5, #12
 8002d66:	bf38      	it	cc
 8002d68:	250c      	movcc	r5, #12
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	4606      	mov	r6, r0
 8002d6e:	db01      	blt.n	8002d74 <_malloc_r+0x1c>
 8002d70:	42a9      	cmp	r1, r5
 8002d72:	d904      	bls.n	8002d7e <_malloc_r+0x26>
 8002d74:	230c      	movs	r3, #12
 8002d76:	6033      	str	r3, [r6, #0]
 8002d78:	2000      	movs	r0, #0
 8002d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e54 <_malloc_r+0xfc>
 8002d82:	f000 f869 	bl	8002e58 <__malloc_lock>
 8002d86:	f8d8 3000 	ldr.w	r3, [r8]
 8002d8a:	461c      	mov	r4, r3
 8002d8c:	bb44      	cbnz	r4, 8002de0 <_malloc_r+0x88>
 8002d8e:	4629      	mov	r1, r5
 8002d90:	4630      	mov	r0, r6
 8002d92:	f7ff ffbf 	bl	8002d14 <sbrk_aligned>
 8002d96:	1c43      	adds	r3, r0, #1
 8002d98:	4604      	mov	r4, r0
 8002d9a:	d158      	bne.n	8002e4e <_malloc_r+0xf6>
 8002d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8002da0:	4627      	mov	r7, r4
 8002da2:	2f00      	cmp	r7, #0
 8002da4:	d143      	bne.n	8002e2e <_malloc_r+0xd6>
 8002da6:	2c00      	cmp	r4, #0
 8002da8:	d04b      	beq.n	8002e42 <_malloc_r+0xea>
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	4639      	mov	r1, r7
 8002dae:	4630      	mov	r0, r6
 8002db0:	eb04 0903 	add.w	r9, r4, r3
 8002db4:	f000 f8a8 	bl	8002f08 <_sbrk_r>
 8002db8:	4581      	cmp	r9, r0
 8002dba:	d142      	bne.n	8002e42 <_malloc_r+0xea>
 8002dbc:	6821      	ldr	r1, [r4, #0]
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	1a6d      	subs	r5, r5, r1
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	f7ff ffa6 	bl	8002d14 <sbrk_aligned>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	d03a      	beq.n	8002e42 <_malloc_r+0xea>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	442b      	add	r3, r5
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	bb62      	cbnz	r2, 8002e34 <_malloc_r+0xdc>
 8002dda:	f8c8 7000 	str.w	r7, [r8]
 8002dde:	e00f      	b.n	8002e00 <_malloc_r+0xa8>
 8002de0:	6822      	ldr	r2, [r4, #0]
 8002de2:	1b52      	subs	r2, r2, r5
 8002de4:	d420      	bmi.n	8002e28 <_malloc_r+0xd0>
 8002de6:	2a0b      	cmp	r2, #11
 8002de8:	d917      	bls.n	8002e1a <_malloc_r+0xc2>
 8002dea:	1961      	adds	r1, r4, r5
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	6025      	str	r5, [r4, #0]
 8002df0:	bf18      	it	ne
 8002df2:	6059      	strne	r1, [r3, #4]
 8002df4:	6863      	ldr	r3, [r4, #4]
 8002df6:	bf08      	it	eq
 8002df8:	f8c8 1000 	streq.w	r1, [r8]
 8002dfc:	5162      	str	r2, [r4, r5]
 8002dfe:	604b      	str	r3, [r1, #4]
 8002e00:	4630      	mov	r0, r6
 8002e02:	f000 f82f 	bl	8002e64 <__malloc_unlock>
 8002e06:	f104 000b 	add.w	r0, r4, #11
 8002e0a:	1d23      	adds	r3, r4, #4
 8002e0c:	f020 0007 	bic.w	r0, r0, #7
 8002e10:	1ac2      	subs	r2, r0, r3
 8002e12:	bf1c      	itt	ne
 8002e14:	1a1b      	subne	r3, r3, r0
 8002e16:	50a3      	strne	r3, [r4, r2]
 8002e18:	e7af      	b.n	8002d7a <_malloc_r+0x22>
 8002e1a:	6862      	ldr	r2, [r4, #4]
 8002e1c:	42a3      	cmp	r3, r4
 8002e1e:	bf0c      	ite	eq
 8002e20:	f8c8 2000 	streq.w	r2, [r8]
 8002e24:	605a      	strne	r2, [r3, #4]
 8002e26:	e7eb      	b.n	8002e00 <_malloc_r+0xa8>
 8002e28:	4623      	mov	r3, r4
 8002e2a:	6864      	ldr	r4, [r4, #4]
 8002e2c:	e7ae      	b.n	8002d8c <_malloc_r+0x34>
 8002e2e:	463c      	mov	r4, r7
 8002e30:	687f      	ldr	r7, [r7, #4]
 8002e32:	e7b6      	b.n	8002da2 <_malloc_r+0x4a>
 8002e34:	461a      	mov	r2, r3
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	42a3      	cmp	r3, r4
 8002e3a:	d1fb      	bne.n	8002e34 <_malloc_r+0xdc>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6053      	str	r3, [r2, #4]
 8002e40:	e7de      	b.n	8002e00 <_malloc_r+0xa8>
 8002e42:	230c      	movs	r3, #12
 8002e44:	4630      	mov	r0, r6
 8002e46:	6033      	str	r3, [r6, #0]
 8002e48:	f000 f80c 	bl	8002e64 <__malloc_unlock>
 8002e4c:	e794      	b.n	8002d78 <_malloc_r+0x20>
 8002e4e:	6005      	str	r5, [r0, #0]
 8002e50:	e7d6      	b.n	8002e00 <_malloc_r+0xa8>
 8002e52:	bf00      	nop
 8002e54:	20001120 	.word	0x20001120

08002e58 <__malloc_lock>:
 8002e58:	4801      	ldr	r0, [pc, #4]	@ (8002e60 <__malloc_lock+0x8>)
 8002e5a:	f000 b88f 	b.w	8002f7c <__retarget_lock_acquire_recursive>
 8002e5e:	bf00      	nop
 8002e60:	20001260 	.word	0x20001260

08002e64 <__malloc_unlock>:
 8002e64:	4801      	ldr	r0, [pc, #4]	@ (8002e6c <__malloc_unlock+0x8>)
 8002e66:	f000 b88a 	b.w	8002f7e <__retarget_lock_release_recursive>
 8002e6a:	bf00      	nop
 8002e6c:	20001260 	.word	0x20001260

08002e70 <memset>:
 8002e70:	4603      	mov	r3, r0
 8002e72:	4402      	add	r2, r0
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d100      	bne.n	8002e7a <memset+0xa>
 8002e78:	4770      	bx	lr
 8002e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7e:	e7f9      	b.n	8002e74 <memset+0x4>

08002e80 <_raise_r>:
 8002e80:	291f      	cmp	r1, #31
 8002e82:	b538      	push	{r3, r4, r5, lr}
 8002e84:	4605      	mov	r5, r0
 8002e86:	460c      	mov	r4, r1
 8002e88:	d904      	bls.n	8002e94 <_raise_r+0x14>
 8002e8a:	2316      	movs	r3, #22
 8002e8c:	6003      	str	r3, [r0, #0]
 8002e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e92:	bd38      	pop	{r3, r4, r5, pc}
 8002e94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002e96:	b112      	cbz	r2, 8002e9e <_raise_r+0x1e>
 8002e98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002e9c:	b94b      	cbnz	r3, 8002eb2 <_raise_r+0x32>
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f000 f830 	bl	8002f04 <_getpid_r>
 8002ea4:	4622      	mov	r2, r4
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eae:	f000 b817 	b.w	8002ee0 <_kill_r>
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d00a      	beq.n	8002ecc <_raise_r+0x4c>
 8002eb6:	1c59      	adds	r1, r3, #1
 8002eb8:	d103      	bne.n	8002ec2 <_raise_r+0x42>
 8002eba:	2316      	movs	r3, #22
 8002ebc:	6003      	str	r3, [r0, #0]
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	e7e7      	b.n	8002e92 <_raise_r+0x12>
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002eca:	4798      	blx	r3
 8002ecc:	2000      	movs	r0, #0
 8002ece:	e7e0      	b.n	8002e92 <_raise_r+0x12>

08002ed0 <raise>:
 8002ed0:	4b02      	ldr	r3, [pc, #8]	@ (8002edc <raise+0xc>)
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	f7ff bfd3 	b.w	8002e80 <_raise_r>
 8002eda:	bf00      	nop
 8002edc:	2000000c 	.word	0x2000000c

08002ee0 <_kill_r>:
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	4d06      	ldr	r5, [pc, #24]	@ (8002f00 <_kill_r+0x20>)
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	4608      	mov	r0, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	602b      	str	r3, [r5, #0]
 8002eee:	f7fe fa14 	bl	800131a <_kill>
 8002ef2:	1c43      	adds	r3, r0, #1
 8002ef4:	d102      	bne.n	8002efc <_kill_r+0x1c>
 8002ef6:	682b      	ldr	r3, [r5, #0]
 8002ef8:	b103      	cbz	r3, 8002efc <_kill_r+0x1c>
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	bd38      	pop	{r3, r4, r5, pc}
 8002efe:	bf00      	nop
 8002f00:	2000125c 	.word	0x2000125c

08002f04 <_getpid_r>:
 8002f04:	f7fe ba02 	b.w	800130c <_getpid>

08002f08 <_sbrk_r>:
 8002f08:	b538      	push	{r3, r4, r5, lr}
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	4d05      	ldr	r5, [pc, #20]	@ (8002f24 <_sbrk_r+0x1c>)
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	602b      	str	r3, [r5, #0]
 8002f14:	f7fe fa1c 	bl	8001350 <_sbrk>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d102      	bne.n	8002f22 <_sbrk_r+0x1a>
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	b103      	cbz	r3, 8002f22 <_sbrk_r+0x1a>
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	2000125c 	.word	0x2000125c

08002f28 <__errno>:
 8002f28:	4b01      	ldr	r3, [pc, #4]	@ (8002f30 <__errno+0x8>)
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	2000000c 	.word	0x2000000c

08002f34 <__libc_init_array>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	2600      	movs	r6, #0
 8002f38:	4d0c      	ldr	r5, [pc, #48]	@ (8002f6c <__libc_init_array+0x38>)
 8002f3a:	4c0d      	ldr	r4, [pc, #52]	@ (8002f70 <__libc_init_array+0x3c>)
 8002f3c:	1b64      	subs	r4, r4, r5
 8002f3e:	10a4      	asrs	r4, r4, #2
 8002f40:	42a6      	cmp	r6, r4
 8002f42:	d109      	bne.n	8002f58 <__libc_init_array+0x24>
 8002f44:	f000 f864 	bl	8003010 <_init>
 8002f48:	2600      	movs	r6, #0
 8002f4a:	4d0a      	ldr	r5, [pc, #40]	@ (8002f74 <__libc_init_array+0x40>)
 8002f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f78 <__libc_init_array+0x44>)
 8002f4e:	1b64      	subs	r4, r4, r5
 8002f50:	10a4      	asrs	r4, r4, #2
 8002f52:	42a6      	cmp	r6, r4
 8002f54:	d105      	bne.n	8002f62 <__libc_init_array+0x2e>
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5c:	4798      	blx	r3
 8002f5e:	3601      	adds	r6, #1
 8002f60:	e7ee      	b.n	8002f40 <__libc_init_array+0xc>
 8002f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f66:	4798      	blx	r3
 8002f68:	3601      	adds	r6, #1
 8002f6a:	e7f2      	b.n	8002f52 <__libc_init_array+0x1e>
 8002f6c:	0800304c 	.word	0x0800304c
 8002f70:	0800304c 	.word	0x0800304c
 8002f74:	0800304c 	.word	0x0800304c
 8002f78:	08003058 	.word	0x08003058

08002f7c <__retarget_lock_acquire_recursive>:
 8002f7c:	4770      	bx	lr

08002f7e <__retarget_lock_release_recursive>:
 8002f7e:	4770      	bx	lr

08002f80 <_free_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4605      	mov	r5, r0
 8002f84:	2900      	cmp	r1, #0
 8002f86:	d040      	beq.n	800300a <_free_r+0x8a>
 8002f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f8c:	1f0c      	subs	r4, r1, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bfb8      	it	lt
 8002f92:	18e4      	addlt	r4, r4, r3
 8002f94:	f7ff ff60 	bl	8002e58 <__malloc_lock>
 8002f98:	4a1c      	ldr	r2, [pc, #112]	@ (800300c <_free_r+0x8c>)
 8002f9a:	6813      	ldr	r3, [r2, #0]
 8002f9c:	b933      	cbnz	r3, 8002fac <_free_r+0x2c>
 8002f9e:	6063      	str	r3, [r4, #4]
 8002fa0:	6014      	str	r4, [r2, #0]
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fa8:	f7ff bf5c 	b.w	8002e64 <__malloc_unlock>
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	d908      	bls.n	8002fc2 <_free_r+0x42>
 8002fb0:	6820      	ldr	r0, [r4, #0]
 8002fb2:	1821      	adds	r1, r4, r0
 8002fb4:	428b      	cmp	r3, r1
 8002fb6:	bf01      	itttt	eq
 8002fb8:	6819      	ldreq	r1, [r3, #0]
 8002fba:	685b      	ldreq	r3, [r3, #4]
 8002fbc:	1809      	addeq	r1, r1, r0
 8002fbe:	6021      	streq	r1, [r4, #0]
 8002fc0:	e7ed      	b.n	8002f9e <_free_r+0x1e>
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	b10b      	cbz	r3, 8002fcc <_free_r+0x4c>
 8002fc8:	42a3      	cmp	r3, r4
 8002fca:	d9fa      	bls.n	8002fc2 <_free_r+0x42>
 8002fcc:	6811      	ldr	r1, [r2, #0]
 8002fce:	1850      	adds	r0, r2, r1
 8002fd0:	42a0      	cmp	r0, r4
 8002fd2:	d10b      	bne.n	8002fec <_free_r+0x6c>
 8002fd4:	6820      	ldr	r0, [r4, #0]
 8002fd6:	4401      	add	r1, r0
 8002fd8:	1850      	adds	r0, r2, r1
 8002fda:	4283      	cmp	r3, r0
 8002fdc:	6011      	str	r1, [r2, #0]
 8002fde:	d1e0      	bne.n	8002fa2 <_free_r+0x22>
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4408      	add	r0, r1
 8002fe6:	6010      	str	r0, [r2, #0]
 8002fe8:	6053      	str	r3, [r2, #4]
 8002fea:	e7da      	b.n	8002fa2 <_free_r+0x22>
 8002fec:	d902      	bls.n	8002ff4 <_free_r+0x74>
 8002fee:	230c      	movs	r3, #12
 8002ff0:	602b      	str	r3, [r5, #0]
 8002ff2:	e7d6      	b.n	8002fa2 <_free_r+0x22>
 8002ff4:	6820      	ldr	r0, [r4, #0]
 8002ff6:	1821      	adds	r1, r4, r0
 8002ff8:	428b      	cmp	r3, r1
 8002ffa:	bf01      	itttt	eq
 8002ffc:	6819      	ldreq	r1, [r3, #0]
 8002ffe:	685b      	ldreq	r3, [r3, #4]
 8003000:	1809      	addeq	r1, r1, r0
 8003002:	6021      	streq	r1, [r4, #0]
 8003004:	6063      	str	r3, [r4, #4]
 8003006:	6054      	str	r4, [r2, #4]
 8003008:	e7cb      	b.n	8002fa2 <_free_r+0x22>
 800300a:	bd38      	pop	{r3, r4, r5, pc}
 800300c:	20001120 	.word	0x20001120

08003010 <_init>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr

0800301c <_fini>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	bf00      	nop
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr
